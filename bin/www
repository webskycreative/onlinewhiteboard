#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Whiteboard:server');
var http = require('http');
var request = require("request");

//Receiving config file location
var userconfig = require("../user.json");

//EASY RTC DEPENDENCIES
var io = require("socket.io");         // web socket external module
var easyrtc = require("easyrtc");      // EasyRTC external module


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var porthttps = normalizePort = normalizePort(process.env.PORT || '8000');
app.set('port', port);
app.set('porthttps', porthttps);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//EASY RTC CONFIG
// Start Socket.io so it attaches itself to Express server
var socketServer = io.listen(server, {"log level":3});

// Start EasyRTC server
var rtc = easyrtc.listen(app, socketServer);

//REF: http://xirsys.com/easyrtc/
easyrtc.on("getIceConfig", function(connectionObj, callback) {

    // This object will take in an array of XirSys STUN and TURN servers
    var iceConfig = [];

    request.post('https://service.xirsys.com/ice', userconfig,
        function (error, response, body) {
            if (!error && response.statusCode == 200) {
                // body.d.iceServers is where the array of ICE servers lives
                iceConfig = body.d.iceServers;
                console.log(iceConfig);
                callback(null, iceConfig);
            }
        });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
